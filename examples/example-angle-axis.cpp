#include <iostream>
#include <chrono>
#include <fstream>
#include <sstream>

#include <CodeGenerator.h>
#include <AutoDiff.h>
#include <RecType.h>
#include <Tensors.h>

using namespace AutoGen;
using namespace dde::math;

template <typename Type, int Size> using Vector = Eigen::Matrix<Type, Size, 1>;
template <typename Type> using Vector3 = Eigen::Matrix<Type, 3, 1>;

template <typename Type, int Rows, int Cols> using Matrix = Eigen::Matrix<Type, Rows, Cols>;
template <typename Type> using Matrix3 = Eigen::Matrix<Type, 3, 3>;

template<class T>
Matrix3<T> skew_sym(const Vector3<T> &v){
    Matrix3<T> v_hat;
    v_hat << 0, -v(2),  v(1),
        v(2),     0, -v(0),
        -v(1),  v(0),     0;
    return v_hat;
};

Tensor3d3 dR_cg(const Vector3d &v) {

    Tensor3d3 dR;

    double v0 = v[0];
    double v1 = v[1];
    double v2 = v[2];
    double v3 = 0.500000;
    double v4 = v0 * v0;
    double v5 = v1 * v1;
    double v6 = v2 * v2;
    double v7 = v5 + v6;
    double v8 = v4 + v7;
    double v9 = sqrt(v8);
    double v10 = v3 / v9;
    double v11 = v0 + v0;
    double v12 = v10 * v11;
    double v13 = v9 * v9;
    double v14 = v2 / v13;
    double v15 = v12 * v14;
    double v16 = -v15;
    double v17 = v2 / v9;
    double v18 = -v17;
    double v19 = v16 * v18;
    double v20 = -v16;
    double v21 = v20 * v17;
    double v22 = v19 + v21;
    double v23 = v1 / v13;
    double v24 = v12 * v23;
    double v25 = -v24;
    double v26 = -v25;
    double v27 = v1 / v9;
    double v28 = v26 * v27;
    double v29 = -v27;
    double v30 = v25 * v29;
    double v31 = v28 + v30;
    double v32 = v22 + v31;
    double v33 = 2.000000;
    double v34 = v3 * v9;
    double v35 = sin(v34);
    double v36 = v33 * v35;
    double v37 = v36 * v35;
    double v38 = v32 * v37;
    double v39 = cos(v34);
    double v40 = v3 * v12;
    double v41 = v39 * v40;
    double v42 = v41 * v36;
    double v43 = v41 * v33;
    double v44 = v43 * v35;
    double v45 = v42 + v44;
    double v46 = v18 * v17;
    double v47 = v27 * v29;
    double v48 = v46 + v47;
    double v49 = v45 * v48;
    double v50 = v38 + v49;
    double v51 = sin(v9);
    double v52 = v20 * v51;
    double v53 = cos(v9);
    double v54 = v53 * v12;
    double v55 = v54 * v18;
    double v56 = v52 + v55;
    double v57 = v9 / v13;
    double v58 = v0 / v13;
    double v59 = v12 * v58;
    double v60 = v57 - v59;
    double v61 = v60 * v27;
    double v62 = v0 / v9;
    double v63 = v25 * v62;
    double v64 = v61 + v63;
    double v65 = v64 * v37;
    double v66 = v27 * v62;
    double v67 = v45 * v66;
    double v68 = v65 + v67;
    double v69 = v56 + v68;
    double v70 = v25 * v51;
    double v71 = v54 * v27;
    double v72 = v70 + v71;
    double v73 = -v60;
    double v74 = v73 * v18;
    double v75 = -v62;
    double v76 = v20 * v75;
    double v77 = v74 + v76;
    double v78 = v77 * v37;
    double v79 = v18 * v75;
    double v80 = v45 * v79;
    double v81 = v78 + v80;
    double v82 = v72 + v81;
    double v83 = v16 * v51;
    double v84 = v54 * v17;
    double v85 = v83 + v84;
    double v86 = v26 * v75;
    double v87 = v73 * v29;
    double v88 = v86 + v87;
    double v89 = v88 * v37;
    double v90 = v75 * v29;
    double v91 = v45 * v90;
    double v92 = v89 + v91;
    double v93 = v85 + v92;
    double v94 = v60 * v75;
    double v95 = v73 * v62;
    double v96 = v94 + v95;
    double v97 = v22 + v96;
    double v98 = v97 * v37;
    double v99 = v75 * v62;
    double v100 = v46 + v99;
    double v101 = v45 * v100;
    double v102 = v98 + v101;
    double v103 = v73 * v51;
    double v104 = v54 * v75;
    double v105 = v103 + v104;
    double v106 = v25 * v17;
    double v107 = v16 * v27;
    double v108 = v106 + v107;
    double v109 = v108 * v37;
    double v110 = v17 * v27;
    double v111 = v45 * v110;
    double v112 = v109 + v111;
    double v113 = v105 + v112;
    double v114 = v26 * v51;
    double v115 = v54 * v29;
    double v116 = v114 + v115;
    double v117 = v16 * v62;
    double v118 = v60 * v17;
    double v119 = v117 + v118;
    double v120 = v119 * v37;
    double v121 = v62 * v17;
    double v122 = v45 * v121;
    double v123 = v120 + v122;
    double v124 = v116 + v123;
    double v125 = v60 * v51;
    double v126 = v54 * v62;
    double v127 = v125 + v126;
    double v128 = v20 * v29;
    double v129 = v26 * v18;
    double v130 = v128 + v129;
    double v131 = v130 * v37;
    double v132 = v29 * v18;
    double v133 = v45 * v132;
    double v134 = v131 + v133;
    double v135 = v127 + v134;
    double v136 = v31 + v96;
    double v137 = v136 * v37;
    double v138 = v47 + v99;
    double v139 = v45 * v138;
    double v140 = v137 + v139;
    double v141 = v1 + v1;
    double v142 = v10 * v141;
    double v143 = v142 * v14;
    double v144 = -v143;
    double v145 = v144 * v18;
    double v146 = -v144;
    double v147 = v146 * v17;
    double v148 = v145 + v147;
    double v149 = v142 * v23;
    double v150 = v57 - v149;
    double v151 = -v150;
    double v152 = v151 * v27;
    double v153 = v150 * v29;
    double v154 = v152 + v153;
    double v155 = v148 + v154;
    double v156 = v155 * v37;
    double v157 = v3 * v142;
    double v158 = v39 * v157;
    double v159 = v158 * v36;
    double v160 = v158 * v33;
    double v161 = v160 * v35;
    double v162 = v159 + v161;
    double v163 = v162 * v48;
    double v164 = v156 + v163;
    double v165 = v146 * v51;
    double v166 = v53 * v142;
    double v167 = v166 * v18;
    double v168 = v165 + v167;
    double v169 = v142 * v58;
    double v170 = -v169;
    double v171 = v170 * v27;
    double v172 = v150 * v62;
    double v173 = v171 + v172;
    double v174 = v173 * v37;
    double v175 = v162 * v66;
    double v176 = v174 + v175;
    double v177 = v168 + v176;
    double v178 = v150 * v51;
    double v179 = v166 * v27;
    double v180 = v178 + v179;
    double v181 = -v170;
    double v182 = v181 * v18;
    double v183 = v146 * v75;
    double v184 = v182 + v183;
    double v185 = v184 * v37;
    double v186 = v162 * v79;
    double v187 = v185 + v186;
    double v188 = v180 + v187;
    double v189 = v144 * v51;
    double v190 = v166 * v17;
    double v191 = v189 + v190;
    double v192 = v151 * v75;
    double v193 = v181 * v29;
    double v194 = v192 + v193;
    double v195 = v194 * v37;
    double v196 = v162 * v90;
    double v197 = v195 + v196;
    double v198 = v191 + v197;
    double v199 = v170 * v75;
    double v200 = v181 * v62;
    double v201 = v199 + v200;
    double v202 = v148 + v201;
    double v203 = v202 * v37;
    double v204 = v162 * v100;
    double v205 = v203 + v204;
    double v206 = v181 * v51;
    double v207 = v166 * v75;
    double v208 = v206 + v207;
    double v209 = v150 * v17;
    double v210 = v144 * v27;
    double v211 = v209 + v210;
    double v212 = v211 * v37;
    double v213 = v162 * v110;
    double v214 = v212 + v213;
    double v215 = v208 + v214;
    double v216 = v151 * v51;
    double v217 = v166 * v29;
    double v218 = v216 + v217;
    double v219 = v144 * v62;
    double v220 = v170 * v17;
    double v221 = v219 + v220;
    double v222 = v221 * v37;
    double v223 = v162 * v121;
    double v224 = v222 + v223;
    double v225 = v218 + v224;
    double v226 = v170 * v51;
    double v227 = v166 * v62;
    double v228 = v226 + v227;
    double v229 = v146 * v29;
    double v230 = v151 * v18;
    double v231 = v229 + v230;
    double v232 = v231 * v37;
    double v233 = v162 * v132;
    double v234 = v232 + v233;
    double v235 = v228 + v234;
    double v236 = v154 + v201;
    double v237 = v236 * v37;
    double v238 = v162 * v138;
    double v239 = v237 + v238;
    double v240 = v2 + v2;
    double v241 = v10 * v240;
    double v242 = v241 * v14;
    double v243 = v57 - v242;
    double v244 = v243 * v18;
    double v245 = -v243;
    double v246 = v245 * v17;
    double v247 = v244 + v246;
    double v248 = v241 * v23;
    double v249 = -v248;
    double v250 = -v249;
    double v251 = v250 * v27;
    double v252 = v249 * v29;
    double v253 = v251 + v252;
    double v254 = v247 + v253;
    double v255 = v254 * v37;
    double v256 = v3 * v241;
    double v257 = v39 * v256;
    double v258 = v257 * v36;
    double v259 = v257 * v33;
    double v260 = v259 * v35;
    double v261 = v258 + v260;
    double v262 = v261 * v48;
    double v263 = v255 + v262;
    double v264 = v245 * v51;
    double v265 = v53 * v241;
    double v266 = v265 * v18;
    double v267 = v264 + v266;
    double v268 = v241 * v58;
    double v269 = -v268;
    double v270 = v269 * v27;
    double v271 = v249 * v62;
    double v272 = v270 + v271;
    double v273 = v272 * v37;
    double v274 = v261 * v66;
    double v275 = v273 + v274;
    double v276 = v267 + v275;
    double v277 = v249 * v51;
    double v278 = v265 * v27;
    double v279 = v277 + v278;
    double v280 = -v269;
    double v281 = v280 * v18;
    double v282 = v245 * v75;
    double v283 = v281 + v282;
    double v284 = v283 * v37;
    double v285 = v261 * v79;
    double v286 = v284 + v285;
    double v287 = v279 + v286;
    double v288 = v243 * v51;
    double v289 = v265 * v17;
    double v290 = v288 + v289;
    double v291 = v250 * v75;
    double v292 = v280 * v29;
    double v293 = v291 + v292;
    double v294 = v293 * v37;
    double v295 = v261 * v90;
    double v296 = v294 + v295;
    double v297 = v290 + v296;
    double v298 = v269 * v75;
    double v299 = v280 * v62;
    double v300 = v298 + v299;
    double v301 = v247 + v300;
    double v302 = v301 * v37;
    double v303 = v261 * v100;
    double v304 = v302 + v303;
    double v305 = v280 * v51;
    double v306 = v265 * v75;
    double v307 = v305 + v306;
    double v308 = v249 * v17;
    double v309 = v243 * v27;
    double v310 = v308 + v309;
    double v311 = v310 * v37;
    double v312 = v261 * v110;
    double v313 = v311 + v312;
    double v314 = v307 + v313;
    double v315 = v250 * v51;
    double v316 = v265 * v29;
    double v317 = v315 + v316;
    double v318 = v243 * v62;
    double v319 = v269 * v17;
    double v320 = v318 + v319;
    double v321 = v320 * v37;
    double v322 = v261 * v121;
    double v323 = v321 + v322;
    double v324 = v317 + v323;
    double v325 = v269 * v51;
    double v326 = v265 * v62;
    double v327 = v325 + v326;
    double v328 = v245 * v29;
    double v329 = v250 * v18;
    double v330 = v328 + v329;
    double v331 = v330 * v37;
    double v332 = v261 * v132;
    double v333 = v331 + v332;
    double v334 = v327 + v333;
    double v335 = v253 + v300;
    double v336 = v335 * v37;
    double v337 = v261 * v138;
    double v338 = v336 + v337;
    dR[0](0,0) = v50;
    dR[0](0,1) = v69;
    dR[0](0,2) = v82;
    dR[0](1,0) = v93;
    dR[0](1,1) = v102;
    dR[0](1,2) = v113;
    dR[0](2,0) = v124;
    dR[0](2,1) = v135;
    dR[0](2,2) = v140;
    dR[1](0,0) = v164;
    dR[1](0,1) = v177;
    dR[1](0,2) = v188;
    dR[1](1,0) = v198;
    dR[1](1,1) = v205;
    dR[1](1,2) = v215;
    dR[1](2,0) = v225;
    dR[1](2,1) = v235;
    dR[1](2,2) = v239;
    dR[2](0,0) = v263;
    dR[2](0,1) = v276;
    dR[2](0,2) = v287;
    dR[2](1,0) = v297;
    dR[2](1,1) = v304;
    dR[2](1,2) = v314;
    dR[2](2,0) = v324;
    dR[2](2,1) = v334;
    dR[2](2,2) = v338;

    return dR;
}

Tensor4d3 ddR_cg(const Vector3d &v) {


    Tensor4d3 ddR;

    double v0 = v[0];
    double v1 = v[1];
    double v2 = v[2];
    double v3 = 0.500000;
    double v4 = v0 * v0;
    double v5 = v1 * v1;
    double v6 = v2 * v2;
    double v7 = v5 + v6;
    double v8 = v4 + v7;
    double v9 = sqrt(v8);
    double v10 = v3 / v9;
    double v11 = v0 + v0;
    double v12 = v10 * v11;
    double v13 = v9 * v9;
    double v14 = v2 / v13;
    double v15 = v12 * v14;
    double v16 = -v15;
    double v17 = sin(v9);
    double v18 = v16 * v17;
    double v19 = cos(v9);
    double v20 = v19 * v12;
    double v21 = v2 / v9;
    double v22 = v20 * v21;
    double v23 = v18 + v22;
    double v24 = v1 / v13;
    double v25 = v12 * v24;
    double v26 = -v25;
    double v27 = -v26;
    double v28 = v0 / v9;
    double v29 = -v28;
    double v30 = v27 * v29;
    double v31 = v9 / v13;
    double v32 = v0 / v13;
    double v33 = v12 * v32;
    double v34 = v31 - v33;
    double v35 = -v34;
    double v36 = v1 / v9;
    double v37 = -v36;
    double v38 = v35 * v37;
    double v39 = v30 + v38;
    double v40 = 2.000000;
    double v41 = v3 * v9;
    double v42 = sin(v41);
    double v43 = v40 * v42;
    double v44 = v43 * v42;
    double v45 = v39 * v44;
    double v46 = cos(v41);
    double v47 = v3 * v12;
    double v48 = v46 * v47;
    double v49 = v48 * v43;
    double v50 = v48 * v40;
    double v51 = v50 * v42;
    double v52 = v49 + v51;
    double v53 = v29 * v37;
    double v54 = v52 * v53;
    double v55 = v45 + v54;
    double v56 = v23 + v55;
    double v57 = v0 * v2;
    double v58 = -v1;
    double v59 = 1.000000;
    double v60 = -v21;
    double v61 = v60 * v21;
    double v62 = v36 * v37;
    double v63 = v61 + v62;
    double v64 = v44 * v63;
    double v65 = v59 + v64;
    double v66 = v59 - v65;
    double v67 = v58 * v66;
    double v68 = v17 * v21;
    double v69 = v44 * v53;
    double v70 = v68 + v69;
    double v71 = -v70;
    double v72 = v0 * v71;
    double v73 = v67 + v72;
    double v74 = v57 + v73;
    double v75 = -v74;
    double v76 = v75 / v13;
    double v77 = v56 * v76;
    double v78 = v16 * v60;
    double v79 = -v16;
    double v80 = v79 * v21;
    double v81 = v78 + v80;
    double v82 = v27 * v36;
    double v83 = v26 * v37;
    double v84 = v82 + v83;
    double v85 = v81 + v84;
    double v86 = v85 * v44;
    double v87 = v52 * v63;
    double v88 = v86 + v87;
    double v89 = -v88;
    double v90 = v89 * v58;
    double v91 = -v56;
    double v92 = v91 * v0;
    double v93 = v92 + v71;
    double v94 = v90 + v93;
    double v95 = v2 + v94;
    double v96 = -v95;
    double v97 = v13 * v13;
    double v98 = v13 / v97;
    double v99 = v96 * v98;
    double v100 = v12 * v9;
    double v101 = v100 + v100;
    double v102 = v75 / v97;
    double v103 = v101 * v102;
    double v104 = v99 - v103;
    double v105 = v104 * v70;
    double v106 = v77 + v105;
    double v107 = v27 * v17;
    double v108 = v20 * v37;
    double v109 = v107 + v108;
    double v110 = v16 * v28;
    double v111 = v34 * v21;
    double v112 = v110 + v111;
    double v113 = v112 * v44;
    double v114 = v28 * v21;
    double v115 = v52 * v114;
    double v116 = v113 + v115;
    double v117 = v109 + v116;
    double v118 = v0 * v1;
    double v119 = v2 * v66;
    double v120 = -v0;
    double v121 = v17 * v37;
    double v122 = v44 * v114;
    double v123 = v121 + v122;
    double v124 = -v123;
    double v125 = v120 * v124;
    double v126 = v119 + v125;
    double v127 = v118 + v126;
    double v128 = v127 / v13;
    double v129 = v117 * v128;
    double v130 = v89 * v2;
    double v131 = -v117;
    double v132 = v131 * v120;
    double v133 = -v124;
    double v134 = v132 + v133;
    double v135 = v130 + v134;
    double v136 = v1 + v135;
    double v137 = v136 * v98;
    double v138 = v127 / v97;
    double v139 = v101 * v138;
    double v140 = v137 - v139;
    double v141 = v140 * v123;
    double v142 = v129 + v141;
    double v143 = v106 + v142;
    double v144 = v34 * v29;
    double v145 = v35 * v28;
    double v146 = v144 + v145;
    double v147 = v81 + v146;
    double v148 = v147 * v44;
    double v149 = v29 * v28;
    double v150 = v61 + v149;
    double v151 = v52 * v150;
    double v152 = v148 + v151;
    double v153 = v152 * v76;
    double v154 = v44 * v150;
    double v155 = v59 + v154;
    double v156 = v104 * v155;
    double v157 = v153 + v156;
    double v158 = v34 * v17;
    double v159 = v20 * v28;
    double v160 = v158 + v159;
    double v161 = v79 * v37;
    double v162 = v27 * v60;
    double v163 = v161 + v162;
    double v164 = v163 * v44;
    double v165 = v37 * v60;
    double v166 = v52 * v165;
    double v167 = v164 + v166;
    double v168 = v160 + v167;
    double v169 = v168 * v128;
    double v170 = v17 * v28;
    double v171 = v44 * v165;
    double v172 = v170 + v171;
    double v173 = v140 * v172;
    double v174 = v169 + v173;
    double v175 = v157 + v174;
    double v176 = v35 * v17;
    double v177 = v20 * v29;
    double v178 = v176 + v177;
    double v179 = v26 * v21;
    double v180 = v16 * v36;
    double v181 = v179 + v180;
    double v182 = v181 * v44;
    double v183 = v21 * v36;
    double v184 = v52 * v183;
    double v185 = v182 + v184;
    double v186 = v178 + v185;
    double v187 = v186 * v76;
    double v188 = v17 * v29;
    double v189 = v44 * v183;
    double v190 = v188 + v189;
    double v191 = v104 * v190;
    double v192 = v187 + v191;
    double v193 = v84 + v146;
    double v194 = v193 * v44;
    double v195 = v62 + v149;
    double v196 = v52 * v195;
    double v197 = v194 + v196;
    double v198 = v197 * v128;
    double v199 = v44 * v195;
    double v200 = v59 + v199;
    double v201 = v140 * v200;
    double v202 = v198 + v201;
    double v203 = v192 + v202;
    double v204 = v74 / v13;
    double v205 = v88 * v204;
    double v206 = v95 * v98;
    double v207 = v74 / v97;
    double v208 = v101 * v207;
    double v209 = v206 - v208;
    double v210 = v209 * v65;
    double v211 = v205 + v210;
    double v212 = -v2;
    double v213 = v212 * v71;
    double v214 = v1 * v124;
    double v215 = v213 + v214;
    double v216 = v4 + v215;
    double v217 = -v216;
    double v218 = v217 / v13;
    double v219 = v117 * v218;
    double v220 = v91 * v212;
    double v221 = v131 * v1;
    double v222 = v220 + v221;
    double v223 = v11 + v222;
    double v224 = -v223;
    double v225 = v224 * v98;
    double v226 = v217 / v97;
    double v227 = v101 * v226;
    double v228 = v225 - v227;
    double v229 = v228 * v123;
    double v230 = v219 + v229;
    double v231 = v211 + v230;
    double v232 = v79 * v17;
    double v233 = v20 * v60;
    double v234 = v232 + v233;
    double v235 = v34 * v36;
    double v236 = v26 * v28;
    double v237 = v235 + v236;
    double v238 = v237 * v44;
    double v239 = v36 * v28;
    double v240 = v52 * v239;
    double v241 = v238 + v240;
    double v242 = v234 + v241;
    double v243 = v242 * v204;
    double v244 = v17 * v60;
    double v245 = v44 * v239;
    double v246 = v244 + v245;
    double v247 = v209 * v246;
    double v248 = v243 + v247;
    double v249 = v168 * v218;
    double v250 = v228 * v172;
    double v251 = v249 + v250;
    double v252 = v248 + v251;
    double v253 = v26 * v17;
    double v254 = v20 * v36;
    double v255 = v253 + v254;
    double v256 = v35 * v60;
    double v257 = v79 * v29;
    double v258 = v256 + v257;
    double v259 = v258 * v44;
    double v260 = v60 * v29;
    double v261 = v52 * v260;
    double v262 = v259 + v261;
    double v263 = v255 + v262;
    double v264 = v263 * v204;
    double v265 = v17 * v36;
    double v266 = v44 * v260;
    double v267 = v265 + v266;
    double v268 = v209 * v267;
    double v269 = v264 + v268;
    double v270 = v197 * v218;
    double v271 = v228 * v200;
    double v272 = v270 + v271;
    double v273 = v269 + v272;
    double v274 = -v127;
    double v275 = v274 / v13;
    double v276 = v88 * v275;
    double v277 = -v136;
    double v278 = v277 * v98;
    double v279 = v274 / v97;
    double v280 = v101 * v279;
    double v281 = v278 - v280;
    double v282 = v281 * v65;
    double v283 = v276 + v282;
    double v284 = v216 / v13;
    double v285 = v56 * v284;
    double v286 = v223 * v98;
    double v287 = v216 / v97;
    double v288 = v101 * v287;
    double v289 = v286 - v288;
    double v290 = v289 * v70;
    double v291 = v285 + v290;
    double v292 = v283 + v291;
    double v293 = v242 * v275;
    double v294 = v281 * v246;
    double v295 = v293 + v294;
    double v296 = v152 * v284;
    double v297 = v289 * v155;
    double v298 = v296 + v297;
    double v299 = v295 + v298;
    double v300 = v263 * v275;
    double v301 = v281 * v267;
    double v302 = v300 + v301;
    double v303 = v186 * v284;
    double v304 = v289 * v190;
    double v305 = v303 + v304;
    double v306 = v302 + v305;
    double v307 = v1 * v2;
    double v308 = -v246;
    double v309 = v58 * v308;
    double v310 = v59 - v155;
    double v311 = v0 * v310;
    double v312 = v309 + v311;
    double v313 = v307 + v312;
    double v314 = -v313;
    double v315 = v314 / v13;
    double v316 = v56 * v315;
    double v317 = -v242;
    double v318 = v317 * v58;
    double v319 = -v152;
    double v320 = v319 * v0;
    double v321 = v320 + v310;
    double v322 = v318 + v321;
    double v323 = -v322;
    double v324 = v323 * v98;
    double v325 = v314 / v97;
    double v326 = v101 * v325;
    double v327 = v324 - v326;
    double v328 = v327 * v70;
    double v329 = v316 + v328;
    double v330 = v2 * v308;
    double v331 = -v172;
    double v332 = v120 * v331;
    double v333 = v330 + v332;
    double v334 = v5 + v333;
    double v335 = v334 / v13;
    double v336 = v117 * v335;
    double v337 = v317 * v2;
    double v338 = -v168;
    double v339 = v338 * v120;
    double v340 = -v331;
    double v341 = v339 + v340;
    double v342 = v337 + v341;
    double v343 = v342 * v98;
    double v344 = v334 / v97;
    double v345 = v101 * v344;
    double v346 = v343 - v345;
    double v347 = v346 * v123;
    double v348 = v336 + v347;
    double v349 = v329 + v348;
    double v350 = v152 * v315;
    double v351 = v327 * v155;
    double v352 = v350 + v351;
    double v353 = v168 * v335;
    double v354 = v346 * v172;
    double v355 = v353 + v354;
    double v356 = v352 + v355;
    double v357 = v186 * v315;
    double v358 = v327 * v190;
    double v359 = v357 + v358;
    double v360 = v197 * v335;
    double v361 = v346 * v200;
    double v362 = v360 + v361;
    double v363 = v359 + v362;
    double v364 = v313 / v13;
    double v365 = v88 * v364;
    double v366 = v322 * v98;
    double v367 = v313 / v97;
    double v368 = v101 * v367;
    double v369 = v366 - v368;
    double v370 = v369 * v65;
    double v371 = v365 + v370;
    double v372 = v212 * v310;
    double v373 = v1 * v331;
    double v374 = v372 + v373;
    double v375 = v118 + v374;
    double v376 = -v375;
    double v377 = v376 / v13;
    double v378 = v117 * v377;
    double v379 = v319 * v212;
    double v380 = v338 * v1;
    double v381 = v379 + v380;
    double v382 = v1 + v381;
    double v383 = -v382;
    double v384 = v383 * v98;
    double v385 = v376 / v97;
    double v386 = v101 * v385;
    double v387 = v384 - v386;
    double v388 = v387 * v123;
    double v389 = v378 + v388;
    double v390 = v371 + v389;
    double v391 = v242 * v364;
    double v392 = v369 * v246;
    double v393 = v391 + v392;
    double v394 = v168 * v377;
    double v395 = v387 * v172;
    double v396 = v394 + v395;
    double v397 = v393 + v396;
    double v398 = v263 * v364;
    double v399 = v369 * v267;
    double v400 = v398 + v399;
    double v401 = v197 * v377;
    double v402 = v387 * v200;
    double v403 = v401 + v402;
    double v404 = v400 + v403;
    double v405 = -v334;
    double v406 = v405 / v13;
    double v407 = v88 * v406;
    double v408 = -v342;
    double v409 = v408 * v98;
    double v410 = v405 / v97;
    double v411 = v101 * v410;
    double v412 = v409 - v411;
    double v413 = v412 * v65;
    double v414 = v407 + v413;
    double v415 = v375 / v13;
    double v416 = v56 * v415;
    double v417 = v382 * v98;
    double v418 = v375 / v97;
    double v419 = v101 * v418;
    double v420 = v417 - v419;
    double v421 = v420 * v70;
    double v422 = v416 + v421;
    double v423 = v414 + v422;
    double v424 = v242 * v406;
    double v425 = v412 * v246;
    double v426 = v424 + v425;
    double v427 = v152 * v415;
    double v428 = v420 * v155;
    double v429 = v427 + v428;
    double v430 = v426 + v429;
    double v431 = v263 * v406;
    double v432 = v412 * v267;
    double v433 = v431 + v432;
    double v434 = v186 * v415;
    double v435 = v420 * v190;
    double v436 = v434 + v435;
    double v437 = v433 + v436;
    double v438 = -v267;
    double v439 = v58 * v438;
    double v440 = -v190;
    double v441 = v0 * v440;
    double v442 = v439 + v441;
    double v443 = v6 + v442;
    double v444 = -v443;
    double v445 = v444 / v13;
    double v446 = v56 * v445;
    double v447 = -v263;
    double v448 = v447 * v58;
    double v449 = -v186;
    double v450 = v449 * v0;
    double v451 = v450 + v440;
    double v452 = v448 + v451;
    double v453 = -v452;
    double v454 = v453 * v98;
    double v455 = v444 / v97;
    double v456 = v101 * v455;
    double v457 = v454 - v456;
    double v458 = v457 * v70;
    double v459 = v446 + v458;
    double v460 = v2 * v438;
    double v461 = v59 - v200;
    double v462 = v120 * v461;
    double v463 = v460 + v462;
    double v464 = v307 + v463;
    double v465 = v464 / v13;
    double v466 = v117 * v465;
    double v467 = v447 * v2;
    double v468 = -v197;
    double v469 = v468 * v120;
    double v470 = -v461;
    double v471 = v469 + v470;
    double v472 = v467 + v471;
    double v473 = v472 * v98;
    double v474 = v464 / v97;
    double v475 = v101 * v474;
    double v476 = v473 - v475;
    double v477 = v476 * v123;
    double v478 = v466 + v477;
    double v479 = v459 + v478;
    double v480 = v152 * v445;
    double v481 = v457 * v155;
    double v482 = v480 + v481;
    double v483 = v168 * v465;
    double v484 = v476 * v172;
    double v485 = v483 + v484;
    double v486 = v482 + v485;
    double v487 = v186 * v445;
    double v488 = v457 * v190;
    double v489 = v487 + v488;
    double v490 = v197 * v465;
    double v491 = v476 * v200;
    double v492 = v490 + v491;
    double v493 = v489 + v492;
    double v494 = v443 / v13;
    double v495 = v88 * v494;
    double v496 = v452 * v98;
    double v497 = v443 / v97;
    double v498 = v101 * v497;
    double v499 = v496 - v498;
    double v500 = v499 * v65;
    double v501 = v495 + v500;
    double v502 = v212 * v440;
    double v503 = v1 * v461;
    double v504 = v502 + v503;
    double v505 = v57 + v504;
    double v506 = -v505;
    double v507 = v506 / v13;
    double v508 = v117 * v507;
    double v509 = v449 * v212;
    double v510 = v468 * v1;
    double v511 = v509 + v510;
    double v512 = v2 + v511;
    double v513 = -v512;
    double v514 = v513 * v98;
    double v515 = v506 / v97;
    double v516 = v101 * v515;
    double v517 = v514 - v516;
    double v518 = v517 * v123;
    double v519 = v508 + v518;
    double v520 = v501 + v519;
    double v521 = v242 * v494;
    double v522 = v499 * v246;
    double v523 = v521 + v522;
    double v524 = v168 * v507;
    double v525 = v517 * v172;
    double v526 = v524 + v525;
    double v527 = v523 + v526;
    double v528 = v263 * v494;
    double v529 = v499 * v267;
    double v530 = v528 + v529;
    double v531 = v197 * v507;
    double v532 = v517 * v200;
    double v533 = v531 + v532;
    double v534 = v530 + v533;
    double v535 = -v464;
    double v536 = v535 / v13;
    double v537 = v88 * v536;
    double v538 = -v472;
    double v539 = v538 * v98;
    double v540 = v535 / v97;
    double v541 = v101 * v540;
    double v542 = v539 - v541;
    double v543 = v542 * v65;
    double v544 = v537 + v543;
    double v545 = v505 / v13;
    double v546 = v56 * v545;
    double v547 = v512 * v98;
    double v548 = v505 / v97;
    double v549 = v101 * v548;
    double v550 = v547 - v549;
    double v551 = v550 * v70;
    double v552 = v546 + v551;
    double v553 = v544 + v552;
    double v554 = v242 * v536;
    double v555 = v542 * v246;
    double v556 = v554 + v555;
    double v557 = v152 * v545;
    double v558 = v550 * v155;
    double v559 = v557 + v558;
    double v560 = v556 + v559;
    double v561 = v263 * v536;
    double v562 = v542 * v267;
    double v563 = v561 + v562;
    double v564 = v186 * v545;
    double v565 = v550 * v190;
    double v566 = v564 + v565;
    double v567 = v563 + v566;
    double v568 = v1 + v1;
    double v569 = v10 * v568;
    double v570 = v569 * v14;
    double v571 = -v570;
    double v572 = v571 * v17;
    double v573 = v19 * v569;
    double v574 = v573 * v21;
    double v575 = v572 + v574;
    double v576 = v569 * v24;
    double v577 = v31 - v576;
    double v578 = -v577;
    double v579 = v578 * v29;
    double v580 = v569 * v32;
    double v581 = -v580;
    double v582 = -v581;
    double v583 = v582 * v37;
    double v584 = v579 + v583;
    double v585 = v584 * v44;
    double v586 = v3 * v569;
    double v587 = v46 * v586;
    double v588 = v587 * v43;
    double v589 = v587 * v40;
    double v590 = v589 * v42;
    double v591 = v588 + v590;
    double v592 = v591 * v53;
    double v593 = v585 + v592;
    double v594 = v575 + v593;
    double v595 = v594 * v76;
    double v596 = v571 * v60;
    double v597 = -v571;
    double v598 = v597 * v21;
    double v599 = v596 + v598;
    double v600 = v578 * v36;
    double v601 = v577 * v37;
    double v602 = v600 + v601;
    double v603 = v599 + v602;
    double v604 = v603 * v44;
    double v605 = v591 * v63;
    double v606 = v604 + v605;
    double v607 = -v606;
    double v608 = v607 * v58;
    double v609 = -v66;
    double v610 = v608 + v609;
    double v611 = -v594;
    double v612 = v611 * v0;
    double v613 = v610 + v612;
    double v614 = -v613;
    double v615 = v614 * v98;
    double v616 = v569 * v9;
    double v617 = v616 + v616;
    double v618 = v617 * v102;
    double v619 = v615 - v618;
    double v620 = v619 * v70;
    double v621 = v595 + v620;
    double v622 = v578 * v17;
    double v623 = v573 * v37;
    double v624 = v622 + v623;
    double v625 = v571 * v28;
    double v626 = v581 * v21;
    double v627 = v625 + v626;
    double v628 = v627 * v44;
    double v629 = v591 * v114;
    double v630 = v628 + v629;
    double v631 = v624 + v630;
    double v632 = v631 * v128;
    double v633 = v607 * v2;
    double v634 = -v631;
    double v635 = v634 * v120;
    double v636 = v633 + v635;
    double v637 = v0 + v636;
    double v638 = v637 * v98;
    double v639 = v617 * v138;
    double v640 = v638 - v639;
    double v641 = v640 * v123;
    double v642 = v632 + v641;
    double v643 = v621 + v642;
    double v644 = v581 * v29;
    double v645 = v582 * v28;
    double v646 = v644 + v645;
    double v647 = v599 + v646;
    double v648 = v647 * v44;
    double v649 = v591 * v150;
    double v650 = v648 + v649;
    double v651 = v650 * v76;
    double v652 = v619 * v155;
    double v653 = v651 + v652;
    double v654 = v581 * v17;
    double v655 = v573 * v28;
    double v656 = v654 + v655;
    double v657 = v597 * v37;
    double v658 = v578 * v60;
    double v659 = v657 + v658;
    double v660 = v659 * v44;
    double v661 = v591 * v165;
    double v662 = v660 + v661;
    double v663 = v656 + v662;
    double v664 = v663 * v128;
    double v665 = v640 * v172;
    double v666 = v664 + v665;
    double v667 = v653 + v666;
    double v668 = v582 * v17;
    double v669 = v573 * v29;
    double v670 = v668 + v669;
    double v671 = v577 * v21;
    double v672 = v571 * v36;
    double v673 = v671 + v672;
    double v674 = v673 * v44;
    double v675 = v591 * v183;
    double v676 = v674 + v675;
    double v677 = v670 + v676;
    double v678 = v677 * v76;
    double v679 = v619 * v190;
    double v680 = v678 + v679;
    double v681 = v602 + v646;
    double v682 = v681 * v44;
    double v683 = v591 * v195;
    double v684 = v682 + v683;
    double v685 = v684 * v128;
    double v686 = v640 * v200;
    double v687 = v685 + v686;
    double v688 = v680 + v687;
    double v689 = v606 * v204;
    double v690 = v613 * v98;
    double v691 = v617 * v207;
    double v692 = v690 - v691;
    double v693 = v692 * v65;
    double v694 = v689 + v693;
    double v695 = v631 * v218;
    double v696 = v611 * v212;
    double v697 = v634 * v1;
    double v698 = v697 + v124;
    double v699 = v696 + v698;
    double v700 = -v699;
    double v701 = v700 * v98;
    double v702 = v617 * v226;
    double v703 = v701 - v702;
    double v704 = v703 * v123;
    double v705 = v695 + v704;
    double v706 = v694 + v705;
    double v707 = v597 * v17;
    double v708 = v573 * v60;
    double v709 = v707 + v708;
    double v710 = v581 * v36;
    double v711 = v577 * v28;
    double v712 = v710 + v711;
    double v713 = v712 * v44;
    double v714 = v591 * v239;
    double v715 = v713 + v714;
    double v716 = v709 + v715;
    double v717 = v716 * v204;
    double v718 = v692 * v246;
    double v719 = v717 + v718;
    double v720 = v663 * v218;
    double v721 = v703 * v172;
    double v722 = v720 + v721;
    double v723 = v719 + v722;
    double v724 = v577 * v17;
    double v725 = v573 * v36;
    double v726 = v724 + v725;
    double v727 = v582 * v60;
    double v728 = v597 * v29;
    double v729 = v727 + v728;
    double v730 = v729 * v44;
    double v731 = v591 * v260;
    double v732 = v730 + v731;
    double v733 = v726 + v732;
    double v734 = v733 * v204;
    double v735 = v692 * v267;
    double v736 = v734 + v735;
    double v737 = v684 * v218;
    double v738 = v703 * v200;
    double v739 = v737 + v738;
    double v740 = v736 + v739;
    double v741 = v606 * v275;
    double v742 = -v637;
    double v743 = v742 * v98;
    double v744 = v617 * v279;
    double v745 = v743 - v744;
    double v746 = v745 * v65;
    double v747 = v741 + v746;
    double v748 = v594 * v284;
    double v749 = v699 * v98;
    double v750 = v617 * v287;
    double v751 = v749 - v750;
    double v752 = v751 * v70;
    double v753 = v748 + v752;
    double v754 = v747 + v753;
    double v755 = v716 * v275;
    double v756 = v745 * v246;
    double v757 = v755 + v756;
    double v758 = v650 * v284;
    double v759 = v751 * v155;
    double v760 = v758 + v759;
    double v761 = v757 + v760;
    double v762 = v733 * v275;
    double v763 = v745 * v267;
    double v764 = v762 + v763;
    double v765 = v677 * v284;
    double v766 = v751 * v190;
    double v767 = v765 + v766;
    double v768 = v764 + v767;
    double v769 = v594 * v315;
    double v770 = -v716;
    double v771 = v770 * v58;
    double v772 = -v308;
    double v773 = v771 + v772;
    double v774 = -v650;
    double v775 = v774 * v0;
    double v776 = v773 + v775;
    double v777 = v2 + v776;
    double v778 = -v777;
    double v779 = v778 * v98;
    double v780 = v617 * v325;
    double v781 = v779 - v780;
    double v782 = v781 * v70;
    double v783 = v769 + v782;
    double v784 = v631 * v335;
    double v785 = v770 * v2;
    double v786 = -v663;
    double v787 = v786 * v120;
    double v788 = v785 + v787;
    double v789 = v568 + v788;
    double v790 = v789 * v98;
    double v791 = v617 * v344;
    double v792 = v790 - v791;
    double v793 = v792 * v123;
    double v794 = v784 + v793;
    double v795 = v783 + v794;
    double v796 = v650 * v315;
    double v797 = v781 * v155;
    double v798 = v796 + v797;
    double v799 = v663 * v335;
    double v800 = v792 * v172;
    double v801 = v799 + v800;
    double v802 = v798 + v801;
    double v803 = v677 * v315;
    double v804 = v781 * v190;
    double v805 = v803 + v804;
    double v806 = v684 * v335;
    double v807 = v792 * v200;
    double v808 = v806 + v807;
    double v809 = v805 + v808;
    double v810 = v606 * v364;
    double v811 = v777 * v98;
    double v812 = v617 * v367;
    double v813 = v811 - v812;
    double v814 = v813 * v65;
    double v815 = v810 + v814;
    double v816 = v631 * v377;
    double v817 = v774 * v212;
    double v818 = v786 * v1;
    double v819 = v818 + v331;
    double v820 = v817 + v819;
    double v821 = v0 + v820;
    double v822 = -v821;
    double v823 = v822 * v98;
    double v824 = v617 * v385;
    double v825 = v823 - v824;
    double v826 = v825 * v123;
    double v827 = v816 + v826;
    double v828 = v815 + v827;
    double v829 = v716 * v364;
    double v830 = v813 * v246;
    double v831 = v829 + v830;
    double v832 = v663 * v377;
    double v833 = v825 * v172;
    double v834 = v832 + v833;
    double v835 = v831 + v834;
    double v836 = v733 * v364;
    double v837 = v813 * v267;
    double v838 = v836 + v837;
    double v839 = v684 * v377;
    double v840 = v825 * v200;
    double v841 = v839 + v840;
    double v842 = v838 + v841;
    double v843 = v606 * v406;
    double v844 = -v789;
    double v845 = v844 * v98;
    double v846 = v617 * v410;
    double v847 = v845 - v846;
    double v848 = v847 * v65;
    double v849 = v843 + v848;
    double v850 = v594 * v415;
    double v851 = v821 * v98;
    double v852 = v617 * v418;
    double v853 = v851 - v852;
    double v854 = v853 * v70;
    double v855 = v850 + v854;
    double v856 = v849 + v855;
    double v857 = v716 * v406;
    double v858 = v847 * v246;
    double v859 = v857 + v858;
    double v860 = v650 * v415;
    double v861 = v853 * v155;
    double v862 = v860 + v861;
    double v863 = v859 + v862;
    double v864 = v733 * v406;
    double v865 = v847 * v267;
    double v866 = v864 + v865;
    double v867 = v677 * v415;
    double v868 = v853 * v190;
    double v869 = v867 + v868;
    double v870 = v866 + v869;
    double v871 = v594 * v445;
    double v872 = -v733;
    double v873 = v872 * v58;
    double v874 = -v438;
    double v875 = v873 + v874;
    double v876 = -v677;
    double v877 = v876 * v0;
    double v878 = v875 + v877;
    double v879 = -v878;
    double v880 = v879 * v98;
    double v881 = v617 * v455;
    double v882 = v880 - v881;
    double v883 = v882 * v70;
    double v884 = v871 + v883;
    double v885 = v631 * v465;
    double v886 = v872 * v2;
    double v887 = -v684;
    double v888 = v887 * v120;
    double v889 = v886 + v888;
    double v890 = v2 + v889;
    double v891 = v890 * v98;
    double v892 = v617 * v474;
    double v893 = v891 - v892;
    double v894 = v893 * v123;
    double v895 = v885 + v894;
    double v896 = v884 + v895;
    double v897 = v650 * v445;
    double v898 = v882 * v155;
    double v899 = v897 + v898;
    double v900 = v663 * v465;
    double v901 = v893 * v172;
    double v902 = v900 + v901;
    double v903 = v899 + v902;
    double v904 = v677 * v445;
    double v905 = v882 * v190;
    double v906 = v904 + v905;
    double v907 = v684 * v465;
    double v908 = v893 * v200;
    double v909 = v907 + v908;
    double v910 = v906 + v909;
    double v911 = v606 * v494;
    double v912 = v878 * v98;
    double v913 = v617 * v497;
    double v914 = v912 - v913;
    double v915 = v914 * v65;
    double v916 = v911 + v915;
    double v917 = v631 * v507;
    double v918 = v876 * v212;
    double v919 = v887 * v1;
    double v920 = v919 + v461;
    double v921 = v918 + v920;
    double v922 = -v921;
    double v923 = v922 * v98;
    double v924 = v617 * v515;
    double v925 = v923 - v924;
    double v926 = v925 * v123;
    double v927 = v917 + v926;
    double v928 = v916 + v927;
    double v929 = v716 * v494;
    double v930 = v914 * v246;
    double v931 = v929 + v930;
    double v932 = v663 * v507;
    double v933 = v925 * v172;
    double v934 = v932 + v933;
    double v935 = v931 + v934;
    double v936 = v733 * v494;
    double v937 = v914 * v267;
    double v938 = v936 + v937;
    double v939 = v684 * v507;
    double v940 = v925 * v200;
    double v941 = v939 + v940;
    double v942 = v938 + v941;
    double v943 = v606 * v536;
    double v944 = -v890;
    double v945 = v944 * v98;
    double v946 = v617 * v540;
    double v947 = v945 - v946;
    double v948 = v947 * v65;
    double v949 = v943 + v948;
    double v950 = v594 * v545;
    double v951 = v921 * v98;
    double v952 = v617 * v548;
    double v953 = v951 - v952;
    double v954 = v953 * v70;
    double v955 = v950 + v954;
    double v956 = v949 + v955;
    double v957 = v716 * v536;
    double v958 = v947 * v246;
    double v959 = v957 + v958;
    double v960 = v650 * v545;
    double v961 = v953 * v155;
    double v962 = v960 + v961;
    double v963 = v959 + v962;
    double v964 = v733 * v536;
    double v965 = v947 * v267;
    double v966 = v964 + v965;
    double v967 = v677 * v545;
    double v968 = v953 * v190;
    double v969 = v967 + v968;
    double v970 = v966 + v969;
    double v971 = v2 + v2;
    double v972 = v10 * v971;
    double v973 = v972 * v14;
    double v974 = v31 - v973;
    double v975 = v974 * v17;
    double v976 = v19 * v972;
    double v977 = v976 * v21;
    double v978 = v975 + v977;
    double v979 = v972 * v24;
    double v980 = -v979;
    double v981 = -v980;
    double v982 = v981 * v29;
    double v983 = v972 * v32;
    double v984 = -v983;
    double v985 = -v984;
    double v986 = v985 * v37;
    double v987 = v982 + v986;
    double v988 = v987 * v44;
    double v989 = v3 * v972;
    double v990 = v46 * v989;
    double v991 = v990 * v43;
    double v992 = v990 * v40;
    double v993 = v992 * v42;
    double v994 = v991 + v993;
    double v995 = v994 * v53;
    double v996 = v988 + v995;
    double v997 = v978 + v996;
    double v998 = v997 * v76;
    double v999 = v974 * v60;
    double v1000 = -v974;
    double v1001 = v1000 * v21;
    double v1002 = v999 + v1001;
    double v1003 = v981 * v36;
    double v1004 = v980 * v37;
    double v1005 = v1003 + v1004;
    double v1006 = v1002 + v1005;
    double v1007 = v1006 * v44;
    double v1008 = v994 * v63;
    double v1009 = v1007 + v1008;
    double v1010 = -v1009;
    double v1011 = v1010 * v58;
    double v1012 = -v997;
    double v1013 = v1012 * v0;
    double v1014 = v1011 + v1013;
    double v1015 = v0 + v1014;
    double v1016 = -v1015;
    double v1017 = v1016 * v98;
    double v1018 = v972 * v9;
    double v1019 = v1018 + v1018;
    double v1020 = v1019 * v102;
    double v1021 = v1017 - v1020;
    double v1022 = v1021 * v70;
    double v1023 = v998 + v1022;
    double v1024 = v981 * v17;
    double v1025 = v976 * v37;
    double v1026 = v1024 + v1025;
    double v1027 = v974 * v28;
    double v1028 = v984 * v21;
    double v1029 = v1027 + v1028;
    double v1030 = v1029 * v44;
    double v1031 = v994 * v114;
    double v1032 = v1030 + v1031;
    double v1033 = v1026 + v1032;
    double v1034 = v1033 * v128;
    double v1035 = v1010 * v2;
    double v1036 = v1035 + v66;
    double v1037 = -v1033;
    double v1038 = v1037 * v120;
    double v1039 = v1036 + v1038;
    double v1040 = v1039 * v98;
    double v1041 = v1019 * v138;
    double v1042 = v1040 - v1041;
    double v1043 = v1042 * v123;
    double v1044 = v1034 + v1043;
    double v1045 = v1023 + v1044;
    double v1046 = v984 * v29;
    double v1047 = v985 * v28;
    double v1048 = v1046 + v1047;
    double v1049 = v1002 + v1048;
    double v1050 = v1049 * v44;
    double v1051 = v994 * v150;
    double v1052 = v1050 + v1051;
    double v1053 = v1052 * v76;
    double v1054 = v1021 * v155;
    double v1055 = v1053 + v1054;
    double v1056 = v984 * v17;
    double v1057 = v976 * v28;
    double v1058 = v1056 + v1057;
    double v1059 = v1000 * v37;
    double v1060 = v981 * v60;
    double v1061 = v1059 + v1060;
    double v1062 = v1061 * v44;
    double v1063 = v994 * v165;
    double v1064 = v1062 + v1063;
    double v1065 = v1058 + v1064;
    double v1066 = v1065 * v128;
    double v1067 = v1042 * v172;
    double v1068 = v1066 + v1067;
    double v1069 = v1055 + v1068;
    double v1070 = v985 * v17;
    double v1071 = v976 * v29;
    double v1072 = v1070 + v1071;
    double v1073 = v980 * v21;
    double v1074 = v974 * v36;
    double v1075 = v1073 + v1074;
    double v1076 = v1075 * v44;
    double v1077 = v994 * v183;
    double v1078 = v1076 + v1077;
    double v1079 = v1072 + v1078;
    double v1080 = v1079 * v76;
    double v1081 = v1021 * v190;
    double v1082 = v1080 + v1081;
    double v1083 = v1005 + v1048;
    double v1084 = v1083 * v44;
    double v1085 = v994 * v195;
    double v1086 = v1084 + v1085;
    double v1087 = v1086 * v128;
    double v1088 = v1042 * v200;
    double v1089 = v1087 + v1088;
    double v1090 = v1082 + v1089;
    double v1091 = v1009 * v204;
    double v1092 = v1015 * v98;
    double v1093 = v1019 * v207;
    double v1094 = v1092 - v1093;
    double v1095 = v1094 * v65;
    double v1096 = v1091 + v1095;
    double v1097 = v1033 * v218;
    double v1098 = v1012 * v212;
    double v1099 = -v71;
    double v1100 = v1098 + v1099;
    double v1101 = v1037 * v1;
    double v1102 = v1100 + v1101;
    double v1103 = -v1102;
    double v1104 = v1103 * v98;
    double v1105 = v1019 * v226;
    double v1106 = v1104 - v1105;
    double v1107 = v1106 * v123;
    double v1108 = v1097 + v1107;
    double v1109 = v1096 + v1108;
    double v1110 = v1000 * v17;
    double v1111 = v976 * v60;
    double v1112 = v1110 + v1111;
    double v1113 = v984 * v36;
    double v1114 = v980 * v28;
    double v1115 = v1113 + v1114;
    double v1116 = v1115 * v44;
    double v1117 = v994 * v239;
    double v1118 = v1116 + v1117;
    double v1119 = v1112 + v1118;
    double v1120 = v1119 * v204;
    double v1121 = v1094 * v246;
    double v1122 = v1120 + v1121;
    double v1123 = v1065 * v218;
    double v1124 = v1106 * v172;
    double v1125 = v1123 + v1124;
    double v1126 = v1122 + v1125;
    double v1127 = v980 * v17;
    double v1128 = v976 * v36;
    double v1129 = v1127 + v1128;
    double v1130 = v985 * v60;
    double v1131 = v1000 * v29;
    double v1132 = v1130 + v1131;
    double v1133 = v1132 * v44;
    double v1134 = v994 * v260;
    double v1135 = v1133 + v1134;
    double v1136 = v1129 + v1135;
    double v1137 = v1136 * v204;
    double v1138 = v1094 * v267;
    double v1139 = v1137 + v1138;
    double v1140 = v1086 * v218;
    double v1141 = v1106 * v200;
    double v1142 = v1140 + v1141;
    double v1143 = v1139 + v1142;
    double v1144 = v1009 * v275;
    double v1145 = -v1039;
    double v1146 = v1145 * v98;
    double v1147 = v1019 * v279;
    double v1148 = v1146 - v1147;
    double v1149 = v1148 * v65;
    double v1150 = v1144 + v1149;
    double v1151 = v997 * v284;
    double v1152 = v1102 * v98;
    double v1153 = v1019 * v287;
    double v1154 = v1152 - v1153;
    double v1155 = v1154 * v70;
    double v1156 = v1151 + v1155;
    double v1157 = v1150 + v1156;
    double v1158 = v1119 * v275;
    double v1159 = v1148 * v246;
    double v1160 = v1158 + v1159;
    double v1161 = v1052 * v284;
    double v1162 = v1154 * v155;
    double v1163 = v1161 + v1162;
    double v1164 = v1160 + v1163;
    double v1165 = v1136 * v275;
    double v1166 = v1148 * v267;
    double v1167 = v1165 + v1166;
    double v1168 = v1079 * v284;
    double v1169 = v1154 * v190;
    double v1170 = v1168 + v1169;
    double v1171 = v1167 + v1170;
    double v1172 = v997 * v315;
    double v1173 = -v1119;
    double v1174 = v1173 * v58;
    double v1175 = -v1052;
    double v1176 = v1175 * v0;
    double v1177 = v1174 + v1176;
    double v1178 = v1 + v1177;
    double v1179 = -v1178;
    double v1180 = v1179 * v98;
    double v1181 = v1019 * v325;
    double v1182 = v1180 - v1181;
    double v1183 = v1182 * v70;
    double v1184 = v1172 + v1183;
    double v1185 = v1033 * v335;
    double v1186 = v1173 * v2;
    double v1187 = v1186 + v308;
    double v1188 = -v1065;
    double v1189 = v1188 * v120;
    double v1190 = v1187 + v1189;
    double v1191 = v1190 * v98;
    double v1192 = v1019 * v344;
    double v1193 = v1191 - v1192;
    double v1194 = v1193 * v123;
    double v1195 = v1185 + v1194;
    double v1196 = v1184 + v1195;
    double v1197 = v1052 * v315;
    double v1198 = v1182 * v155;
    double v1199 = v1197 + v1198;
    double v1200 = v1065 * v335;
    double v1201 = v1193 * v172;
    double v1202 = v1200 + v1201;
    double v1203 = v1199 + v1202;
    double v1204 = v1079 * v315;
    double v1205 = v1182 * v190;
    double v1206 = v1204 + v1205;
    double v1207 = v1086 * v335;
    double v1208 = v1193 * v200;
    double v1209 = v1207 + v1208;
    double v1210 = v1206 + v1209;
    double v1211 = v1009 * v364;
    double v1212 = v1178 * v98;
    double v1213 = v1019 * v367;
    double v1214 = v1212 - v1213;
    double v1215 = v1214 * v65;
    double v1216 = v1211 + v1215;
    double v1217 = v1033 * v377;
    double v1218 = v1175 * v212;
    double v1219 = -v310;
    double v1220 = v1218 + v1219;
    double v1221 = v1188 * v1;
    double v1222 = v1220 + v1221;
    double v1223 = -v1222;
    double v1224 = v1223 * v98;
    double v1225 = v1019 * v385;
    double v1226 = v1224 - v1225;
    double v1227 = v1226 * v123;
    double v1228 = v1217 + v1227;
    double v1229 = v1216 + v1228;
    double v1230 = v1119 * v364;
    double v1231 = v1214 * v246;
    double v1232 = v1230 + v1231;
    double v1233 = v1065 * v377;
    double v1234 = v1226 * v172;
    double v1235 = v1233 + v1234;
    double v1236 = v1232 + v1235;
    double v1237 = v1136 * v364;
    double v1238 = v1214 * v267;
    double v1239 = v1237 + v1238;
    double v1240 = v1086 * v377;
    double v1241 = v1226 * v200;
    double v1242 = v1240 + v1241;
    double v1243 = v1239 + v1242;
    double v1244 = v1009 * v406;
    double v1245 = -v1190;
    double v1246 = v1245 * v98;
    double v1247 = v1019 * v410;
    double v1248 = v1246 - v1247;
    double v1249 = v1248 * v65;
    double v1250 = v1244 + v1249;
    double v1251 = v997 * v415;
    double v1252 = v1222 * v98;
    double v1253 = v1019 * v418;
    double v1254 = v1252 - v1253;
    double v1255 = v1254 * v70;
    double v1256 = v1251 + v1255;
    double v1257 = v1250 + v1256;
    double v1258 = v1119 * v406;
    double v1259 = v1248 * v246;
    double v1260 = v1258 + v1259;
    double v1261 = v1052 * v415;
    double v1262 = v1254 * v155;
    double v1263 = v1261 + v1262;
    double v1264 = v1260 + v1263;
    double v1265 = v1136 * v406;
    double v1266 = v1248 * v267;
    double v1267 = v1265 + v1266;
    double v1268 = v1079 * v415;
    double v1269 = v1254 * v190;
    double v1270 = v1268 + v1269;
    double v1271 = v1267 + v1270;
    double v1272 = v997 * v445;
    double v1273 = -v1136;
    double v1274 = v1273 * v58;
    double v1275 = -v1079;
    double v1276 = v1275 * v0;
    double v1277 = v1274 + v1276;
    double v1278 = v971 + v1277;
    double v1279 = -v1278;
    double v1280 = v1279 * v98;
    double v1281 = v1019 * v455;
    double v1282 = v1280 - v1281;
    double v1283 = v1282 * v70;
    double v1284 = v1272 + v1283;
    double v1285 = v1033 * v465;
    double v1286 = v1273 * v2;
    double v1287 = v1286 + v438;
    double v1288 = -v1086;
    double v1289 = v1288 * v120;
    double v1290 = v1287 + v1289;
    double v1291 = v1 + v1290;
    double v1292 = v1291 * v98;
    double v1293 = v1019 * v474;
    double v1294 = v1292 - v1293;
    double v1295 = v1294 * v123;
    double v1296 = v1285 + v1295;
    double v1297 = v1284 + v1296;
    double v1298 = v1052 * v445;
    double v1299 = v1282 * v155;
    double v1300 = v1298 + v1299;
    double v1301 = v1065 * v465;
    double v1302 = v1294 * v172;
    double v1303 = v1301 + v1302;
    double v1304 = v1300 + v1303;
    double v1305 = v1079 * v445;
    double v1306 = v1282 * v190;
    double v1307 = v1305 + v1306;
    double v1308 = v1086 * v465;
    double v1309 = v1294 * v200;
    double v1310 = v1308 + v1309;
    double v1311 = v1307 + v1310;
    double v1312 = v1009 * v494;
    double v1313 = v1278 * v98;
    double v1314 = v1019 * v497;
    double v1315 = v1313 - v1314;
    double v1316 = v1315 * v65;
    double v1317 = v1312 + v1316;
    double v1318 = v1033 * v507;
    double v1319 = v1275 * v212;
    double v1320 = -v440;
    double v1321 = v1319 + v1320;
    double v1322 = v1288 * v1;
    double v1323 = v1321 + v1322;
    double v1324 = v0 + v1323;
    double v1325 = -v1324;
    double v1326 = v1325 * v98;
    double v1327 = v1019 * v515;
    double v1328 = v1326 - v1327;
    double v1329 = v1328 * v123;
    double v1330 = v1318 + v1329;
    double v1331 = v1317 + v1330;
    double v1332 = v1119 * v494;
    double v1333 = v1315 * v246;
    double v1334 = v1332 + v1333;
    double v1335 = v1065 * v507;
    double v1336 = v1328 * v172;
    double v1337 = v1335 + v1336;
    double v1338 = v1334 + v1337;
    double v1339 = v1136 * v494;
    double v1340 = v1315 * v267;
    double v1341 = v1339 + v1340;
    double v1342 = v1086 * v507;
    double v1343 = v1328 * v200;
    double v1344 = v1342 + v1343;
    double v1345 = v1341 + v1344;
    double v1346 = v1009 * v536;
    double v1347 = -v1291;
    double v1348 = v1347 * v98;
    double v1349 = v1019 * v540;
    double v1350 = v1348 - v1349;
    double v1351 = v1350 * v65;
    double v1352 = v1346 + v1351;
    double v1353 = v997 * v545;
    double v1354 = v1324 * v98;
    double v1355 = v1019 * v548;
    double v1356 = v1354 - v1355;
    double v1357 = v1356 * v70;
    double v1358 = v1353 + v1357;
    double v1359 = v1352 + v1358;
    double v1360 = v1119 * v536;
    double v1361 = v1350 * v246;
    double v1362 = v1360 + v1361;
    double v1363 = v1052 * v545;
    double v1364 = v1356 * v155;
    double v1365 = v1363 + v1364;
    double v1366 = v1362 + v1365;
    double v1367 = v1136 * v536;
    double v1368 = v1350 * v267;
    double v1369 = v1367 + v1368;
    double v1370 = v1079 * v545;
    double v1371 = v1356 * v190;
    double v1372 = v1370 + v1371;
    double v1373 = v1369 + v1372;
    ddR[0][0](0,0) = v143;
    ddR[0][0](0,1) = v175;
    ddR[0][0](0,2) = v203;
    ddR[0][0](1,0) = v231;
    ddR[0][0](1,1) = v252;
    ddR[0][0](1,2) = v273;
    ddR[0][0](2,0) = v292;
    ddR[0][0](2,1) = v299;
    ddR[0][0](2,2) = v306;
    ddR[0][1](0,0) = v349;
    ddR[0][1](0,1) = v356;
    ddR[0][1](0,2) = v363;
    ddR[0][1](1,0) = v390;
    ddR[0][1](1,1) = v397;
    ddR[0][1](1,2) = v404;
    ddR[0][1](2,0) = v423;
    ddR[0][1](2,1) = v430;
    ddR[0][1](2,2) = v437;
    ddR[0][2](0,0) = v479;
    ddR[0][2](0,1) = v486;
    ddR[0][2](0,2) = v493;
    ddR[0][2](1,0) = v520;
    ddR[0][2](1,1) = v527;
    ddR[0][2](1,2) = v534;
    ddR[0][2](2,0) = v553;
    ddR[0][2](2,1) = v560;
    ddR[0][2](2,2) = v567;
    ddR[1][0](0,0) = v643;
    ddR[1][0](0,1) = v667;
    ddR[1][0](0,2) = v688;
    ddR[1][0](1,0) = v706;
    ddR[1][0](1,1) = v723;
    ddR[1][0](1,2) = v740;
    ddR[1][0](2,0) = v754;
    ddR[1][0](2,1) = v761;
    ddR[1][0](2,2) = v768;
    ddR[1][1](0,0) = v795;
    ddR[1][1](0,1) = v802;
    ddR[1][1](0,2) = v809;
    ddR[1][1](1,0) = v828;
    ddR[1][1](1,1) = v835;
    ddR[1][1](1,2) = v842;
    ddR[1][1](2,0) = v856;
    ddR[1][1](2,1) = v863;
    ddR[1][1](2,2) = v870;
    ddR[1][2](0,0) = v896;
    ddR[1][2](0,1) = v903;
    ddR[1][2](0,2) = v910;
    ddR[1][2](1,0) = v928;
    ddR[1][2](1,1) = v935;
    ddR[1][2](1,2) = v942;
    ddR[1][2](2,0) = v956;
    ddR[1][2](2,1) = v963;
    ddR[1][2](2,2) = v970;
    ddR[2][0](0,0) = v1045;
    ddR[2][0](0,1) = v1069;
    ddR[2][0](0,2) = v1090;
    ddR[2][0](1,0) = v1109;
    ddR[2][0](1,1) = v1126;
    ddR[2][0](1,2) = v1143;
    ddR[2][0](2,0) = v1157;
    ddR[2][0](2,1) = v1164;
    ddR[2][0](2,2) = v1171;
    ddR[2][1](0,0) = v1196;
    ddR[2][1](0,1) = v1203;
    ddR[2][1](0,2) = v1210;
    ddR[2][1](1,0) = v1229;
    ddR[2][1](1,1) = v1236;
    ddR[2][1](1,2) = v1243;
    ddR[2][1](2,0) = v1257;
    ddR[2][1](2,1) = v1264;
    ddR[2][1](2,2) = v1271;
    ddR[2][2](0,0) = v1297;
    ddR[2][2](0,1) = v1304;
    ddR[2][2](0,2) = v1311;
    ddR[2][2](1,0) = v1331;
    ddR[2][2](1,1) = v1338;
    ddR[2][2](1,2) = v1345;
    ddR[2][2](2,0) = v1359;
    ddR[2][2](2,1) = v1366;
    ddR[2][2](2,2) = v1373;

    return ddR;
}

struct AngleAxis
{
    template<class T>
    static Matrix3<T> mul(Matrix3<T> a, Matrix3<T> b){
        Matrix3<T> r;
        for (int j = 0; j < 3; ++j)
            for (int k = 0; k < 3; ++k)
                r(j,k) = a.row(j).dot(b.col(k).transpose());
        return r;
    }

    template<class T>
    static Vector3<T> mul(Matrix3<T> a, Vector3<T> b){
        Vector3<T> r;
        for (int j = 0; j < 3; ++j)
            r[j] = a.row(j).dot(b);
        return r;
    }

    template<class T>
    static Matrix3<T> R(const Vector3<T> &theta) {
        T t = theta.norm();
        Vector3<T> v = theta / t;
        Matrix3<T> v_ = skew_sym(v);
        Matrix3<T> tmp = mul(v_, v_);


        return Matrix3<T>::Identity() + sin(t)*v_ + ((T)2*sin(0.5*t)*sin(0.5*t))*tmp;
    }

    template<class T>
    static Tensor3<T,3,3,3> dR(const Vector3<T> &theta) {

        Tensor3<T,3,3,3> dR_;

        T t = theta.norm();
        Vector3<T> v  = theta;
        Matrix3<T> vx = skew_sym(v);

        Matrix3<T> R_ = R<T>(theta);


        for (int i = 0; i < 3; ++i) {
            Vector3<T> e_i = Vector3<T>::Unit(i);

            Matrix3<T> t0 = mul(vx, Matrix3<T>(Matrix3<T>::Identity() - R_));

            Matrix3<T> t1 = skew_sym(Vector3<T>(v[i]*v + mul(t0,e_i) ))/ (t*t);

            dR_[i] = mul(t1,R_);
        }

        return dR_;
    }

};

void generateCode_dR(){
    typedef RecType<double> Rt;
    typedef AutoDiff<Rt, Rt> AD;

    // record computation
    Vector3<AD> v;
    for (int i = 0; i < 3; ++i) {
        v[i] = Rt("v[" + std::to_string(i) + "]");
    }

    CodeGenerator<double> generator;

    // compute gradient and add to code gen
    {
        Tensor3<Rt, 3,3,3> dR;
        for (int i = 0; i < 3; ++i) {
            v(i).deriv() = 1.0;
            Matrix3<AD> R = AngleAxis::R<AD>(v);
            for (int j = 0; j < 3; ++j)
                for (int k = 0; k < 3; ++k){
                    dR[i](j,k) = R(j,k).deriv();
                    dR[i](j,k).addToGeneratorAsResult(generator, "dR[" + std::to_string(i) + "]("
                                                                       + std::to_string(j) + ","
                                                                       + std::to_string(k) + ")");
                }
            v(i).deriv() = 0.0;
        }
    }

    generator.sortNodes();

    std::cout << generator.generateCode() << std::endl;
}

void generateCode_ddR(){
    typedef RecType<double> Rt;
    typedef AutoDiff<Rt, Rt> AD;

    // record computation
    Vector3<AD> v;
    for (int i = 0; i < 3; ++i) {
        v[i] = Rt("v[" + std::to_string(i) + "]");
    }

    CodeGenerator<double> generator;

    // compute gradient and add to code gen
    {
        Tensor4<Rt, 3,3,3,3> ddR;
        for (int i = 0; i < 3; ++i) {
            v(i).deriv() = 1.0;
            Tensor3<AD,3,3,3> dR = AngleAxis::dR<AD>(v);
            for (int j = 0; j < 3; ++j)
            for (int k = 0; k < 3; ++k)
                for (int l = 0; l < 3; ++l){
                    ddR[i][j](k,l) = dR[j](k,l).deriv();
                    ddR[i][j](k,l).addToGeneratorAsResult(generator, "ddR[" + std::to_string(i) + "]["
                                                                            + std::to_string(j) + "]("
                                                                            + std::to_string(k) + ","
                                                                            + std::to_string(l) + ")");
                }
            v(i).deriv() = 0.0;
        }
    }

    generator.sortNodes();

    std::cout << generator.generateCode() << std::endl;
}

void generateCode_ddR_ij(){
    typedef RecType<double> Rt;
    typedef AutoDiff<Rt, Rt> AD;

    // record computation
    Vector3<AD> v;
    for (int i = 0; i < 3; ++i) {
        v[i] = Rt("v[" + std::to_string(i) + "]");
    }

    // compute gradient and add to code gen
    Tensor4<Rt, 3,3,3,3> ddR;
    for (int i = 0; i < 3; ++i) {
        v(i).deriv() = 1.0;
        Tensor3<AD,3,3,3> dR = AngleAxis::dR<AD>(v);
        for (int j = 0; j < 3; ++j)
        for (int k = 0; k < 3; ++k)
            for (int l = 0; l < 3; ++l){
                ddR[i][j](k,l) = dR[j](k,l).deriv();
            }
        v(i).deriv() = 0.0;
    }

    std::ofstream out("out.hpp");

    {
        for (int i = 0; i < 3; ++i) {
            for (int j = 0; j < 3; ++j) {
                CodeGenerator<double> generator;

                for (int k = 0; k < 3; ++k) {
                    for (int l = 0; l < 3; ++l) {

                        ddR[i][j](k,l).addToGeneratorAsResult(generator, "ddR_"
                                                              + std::to_string(i) + "_"
                                                              + std::to_string(j) + "("
                                                              + std::to_string(k) + ","
                                                              + std::to_string(l) + ")");
                    }
                }
                generator.sortNodes();

                out << "Matrix3d ddR_" << i << "_" << j << "() {\n";
                out << "    Matrix3d ddR_" << i << "_" << j << ";\n";
                out << generator.generateCode("    ") << std::endl;
                out << "    return ddR_" << i << "_" << j << ";\n";
                out << "}\n\n";

            }
        }

    }

    out.close();
}

void generateCode_dddR(){
    typedef RecType<double> Rt;
    typedef AutoDiff<Rt, Rt> AD;
    typedef AutoDiff<AD, AD> ADD;

    // record computation
    Vector3<ADD> v;
    for (int i = 0; i < 3; ++i) {
        v[i] = Rt("v[" + std::to_string(i) + "]");
    }

    CodeGenerator<double> generator;

    // compute gradient and add to code gen
    {
        Tensor5<Rt, 3,3,3,3,3> dddR;
        for (int h = 0; h < 3; ++h) {
            v(h).deriv().value() = 1.0;
            for (int i = 0; i < 3; ++i) {
                v(i).value().deriv() = 1.0;
                Tensor3<ADD,3,3,3> dR = AngleAxis::dR<ADD>(v);
                for (int j = 0; j < 3; ++j)
                    for (int k = 0; k < 3; ++k)
                        for (int l = 0; l < 3; ++l){
                            dddR[h][i][j](k,l) = dR[j](k,l).deriv().deriv();
                            dddR[h][i][j](k,l).addToGeneratorAsResult(generator, "dddR_["
                                                                                   + std::to_string(h) + "]["
                                                                                   + std::to_string(i) + "]["
                                                                                   + std::to_string(j) + "]("
                                                                                   + std::to_string(k) + ","
                                                                                   + std::to_string(l) + ")");
                        }
                v(i).value().deriv() = 1.0;
            }
            v(h).deriv().value() = 0.0;
        }
    }

    generator.sortNodes();

    std::cout << generator.generateCode() << std::endl;
}

int main(int argc, char *argv[])
{

//    generateCode_dR();
//    generateCode_dddR();
    generateCode_ddR_ij();


//    {
//        const Vector3d v = {1,0,0};
//        auto dR = dR_cg(v);
//        auto dR_ = AngleAxis::dR<double>(v);

//        Tensor3d3 dR_fd = Tensor3d3::Zero();
//        {
//            const double h = 1e-8;
//            for (int i = 0; i < 3; ++i) {
//                Vector3d dq = Vector3d::Zero();
//                dq[i] = h;
//                dR_fd[i] = (AngleAxis::R<double>(v+dq) - AngleAxis::R<double>(v-dq)) / (2*h);
//            }
//        }

//        std::cout << dR << std::endl;
//        std::cout << dR_ << std::endl;
//        std::cout << (dR - dR_fd).norm() << std::endl;
//        std::cout << (dR - dR_).norm() << std::endl;

//    }

    {
        const Vector3d v = {1,0,0};
        auto ddR = ddR_cg(v);

        Tensor4d3 ddR_fd = Tensor4d3::Zero();
        {
            const double h = 1e-8;
            for (int i = 0; i < 3; ++i) {
                Vector3d dq = Vector3d::Zero();
                dq[i] = h;
                ddR_fd[i] = (AngleAxis::dR<double>(v+dq) - AngleAxis::dR<double>(v-dq)) / (2*h);
            }
        }

        std::cout << ddR << std::endl;
        std::cout << (ddR - ddR_fd).norm() << std::endl;

    }

}
